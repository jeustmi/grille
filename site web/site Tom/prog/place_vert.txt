void compte_vert(grille_complete & grille, int *** val_comb_vert, mat_tri & vert_pos_mat, int vpm_n, bool & fin){
    int n;
    n=val_comb_vert[0][1][0]; //on initialise n au nombre de verts enlevés dans les tests

    for(int i=0;i<vpm_n-n;++i){ //on lance une boucle qui enleve chaque jeton restant un à un pour calculer le score, n augmentera donc forcément de 1
        int poi=0;
        int pen=0;
        int ** val_1comb;
        val_1comb=new int*[4096];
        for(int j=0;j<4096;++j){
            val_1comb[j]=new int[3];
        }
        //mat2 val_1comb;
        //val_1comb=val_comb_vert[0]; 
        for(int j=0;j<4+n;++j){ //on fait cette affectation pour garder en mémoire les pions deja enleves, on rajoutera par la suite celui qu'on enleve a cette boucle a la fin de val_comb_vert et on changera n en n+1 (pos 1) et le score en fonction (pos 0)
            for(int k=0;k<3;++k){
                val_1comb[j][k]=val_comb_vert[0][j][k];
            }
        }
        val_1comb[1][0]=n+1; //de fait, on enleve 1 pion de plus qu'a la boucle while d'avant (voir la fonction place_vert)
        grille.sl[vert_pos_mat[i][0]][vert_pos_mat[i][1]]='v'; //on teste d'enlever un des pions verts
        val_1comb[2+n][0]=vert_pos_mat[i][0]; val_1comb[2+n][1]=vert_pos_mat[i][1]; val_1comb[2+n][2]=i; //on rajoute ses coordonnées à la fin de val_1comb 
        
        for(int j=0;j<vpm_n-n;++j){ //on compte les points des verts non enleves
            if(j!=i){
                jeton_v(grille,poi,pen,vert_pos_mat[j][0],vert_pos_mat[j][1]);
                grille.sl[vert_pos_mat[j][0]][vert_pos_mat[j][1]]='v';
            }
        }

        for(int j=0;j<vpm_n-n;++j){ //on replace les verts non enleves (on les remplace temporairement par 'v' pour le comptage)
            if(j!=i){
                grille.sl[vert_pos_mat[j][0]][vert_pos_mat[j][1]]='V';
            }
        }

        grille.sl[vert_pos_mat[i][0]][vert_pos_mat[i][1]]='V'; //on replace le vert enleve (on ne le fait pas avant pour pouvoir faire une vérification avec des std::cout)
        val_1comb[0][0]=poi-pen; //on rentre le score de cette combinaison

        int j=i+1;

        while ((j>1) and (val_comb_vert[j-1][0][0] < val_1comb[0][0])){ //on trie par insertion les meilleures combinaisons de cette boucle
            for(int k=0;k<4+n;++k){
                for(int l=0;l<3;++l){
                    val_comb_vert[j][k][l] = val_comb_vert[j-1][k][l];
                }
            }
            --j;
        }
        for(int k=0;k<4+n;++k){
            for(int l=0;l<3;++l){
                val_comb_vert[j][k][l]=val_1comb[k][l];
            }
        }

        for(int j=0;j<4096;++j){
            delete[] val_1comb[j];
        }
        delete[] val_1comb;
                
    }
    
    int j=val_comb_vert[1][2+n][2]; //on met le pion enleve donnant le plus grand score a la fin de notre liste pour pouvoir ne plus le compter après
    
    tab_tri temp;
    temp=vert_pos_mat[j];

    while (j<vpm_n){
        vert_pos_mat[j] = vert_pos_mat[j+1];
        ++j;
    }

    vert_pos_mat[j]=temp;

    if(val_comb_vert[1][0][0]>=val_comb_vert[0][0][0]){ //si la combinaison actuelle est meilleure que celle d'avant, on recommence
        for(int k=0;k<4+n;++k){
            for(int l=0;l<3;++l){
                val_comb_vert[0][k][l]=val_comb_vert[1][k][l];
            }
        }
        grille.sl[val_comb_vert[0][2+n][0]][val_comb_vert[0][2+n][1]]='1';
    }
    else{ //sinon, on arrete
        fin=true;
    }
}

void place_vert(grille_complete & grille){
    mat_tri vert_mat;
    tab_tri vert_tab;
    int poi,pen,i,j,vn;
    vn=0;

    for(i=0;i<grille.n;i++){ 
        for(j=0;j<grille.n;j++){
            if(grille.sl[i][j]=='1' or grille.sl[i][j]=='V'){ //on regarde toutes les cases non prises
                poi=0;
                pen=0;
                jeton_v(grille,poi,pen,i,j); //on compte les points de cette case si on mettait un vert dessus
                vert_tab={poi,i,j};
                ++vn;
                int k;
                k=vn-1;
                while ((k>0) and (vert_mat[k-1][0] > vert_tab[0])){ //on trie par score
                    vert_mat[k] = vert_mat[k-1];
                    --k;
                }
                vert_mat[k] = vert_tab;
            }
        }
    }

    mat_tri vert_pos_mat;
    int a, vpm_n=0;
    poi=0;
    pen=0;
    i=vn-1;
    a=recherche_min_positif_mat(vert_mat,grille.t);

    while(i>=a){ //on ne garde que les meilleures cases (celles rapportant un score positif)
        jeton_v(grille,poi,pen,vert_mat[i][1],vert_mat[i][2]);
        grille.sl[vert_mat[i][1]][vert_mat[i][2]]='V'; //on pose un jeton sur chacune de ces cases
        vert_pos_mat[vpm_n]={vert_mat[i][1],vert_mat[i][2]};
        ++vpm_n;
        --i;
    }

    int *** val_comb_vert;
    val_comb_vert=new int **[4096];
    for(i=0;i<4096;++i){
        val_comb_vert[i]=new int*[4096];
        for(j=0;j<4096;++j){
            val_comb_vert[i][j]=new int[3];
        }
    }
    //mat3 val_comb_vert;
    val_comb_vert[0][0][0]=poi-pen; //on initialise val_comb_vert
    val_comb_vert[0][0][1]=-2;
    val_comb_vert[0][0][2]=-2;
    val_comb_vert[0][1][0]=0;
    val_comb_vert[0][1][1]=-2;
    val_comb_vert[0][1][2]=-2;
    bool fin=false;

    while(fin==false){ //on lance le programme pour trouver la meilleure combinaison de verts parmi ceux posés au début
        compte_vert(grille,val_comb_vert,vert_pos_mat,vpm_n,fin);
        if(val_comb_vert[0][1][0]==vpm_n){
            fin=true;
        }
    }
    
    for(int j=0;j<4096;++j){
        for(int k=0;k<4096;++k){
            delete[] val_comb_vert[j][k];
        }
    }
    for(int j=0;j<4096;++j){
        delete[] val_comb_vert[j];
    }
    delete[] val_comb_vert;

}
